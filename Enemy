using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Enemy : MonoBehaviour
{
    // 적 움직임 속도 설정
    [SerializeField] float Enemy_Walk = 1;
    [SerializeField] float Enemy_Run = 2;
    private bool isChasing;

    // 경로 이동 관련
    private bool isPatrol;
    private bool isdone;
    [SerializeField] Vector3[] WayPoints;
    private Vector3 POS_Now;
    private Vector3 Target_Pos;
    [SerializeField] int WayPoint_Index = 0;
    [SerializeField] int way_check = 0;
    public bool way_check_ready = true;

    // SFX, 컴포넌트 등
    [SerializeField] GameObject Walk_sfx;
    [SerializeField] GameObject Run_sfx;
    [SerializeField] GameObject Enemy_CR;
    Animator Enemy_Anime;

    // Stage 판별 / Player 상태 파악 등
    [SerializeField] GameObject State;
    public int Stage_count;
    public bool isReset = true;

    // 시작 위치 (Stage별로 다르게 적용해줘야 함)
    [SerializeField] Vector3 Starting_Point;

    // BGM 1/2 = 평시, 3 = 추격중
    [SerializeField] GameObject Music1;
    [SerializeField] GameObject Music2;
    [SerializeField] GameObject Music3;




    private void Start()
    {
        Enemy_Reset();

        WayPoints = new Vector3[4];
        Enemy_Anime = Enemy_CR.GetComponent<Animator>();

        Music3.SetActive(false);

        // Stage별 이동 경로 배열에 값 할당
        if (Stage_count == 3)
        {

            WayPoints.SetValue(new Vector3(0f, 0f, 0f), 0); //Way 0 = 순찰 시작 지점까지 이동
            WayPoints.SetValue(new Vector3(0f, 0f, 0f), 1); //Way 1 = 순찰 시작 살짝 앞까지 이동(순찰 시작)
            WayPoints.SetValue(new Vector3(0f, 0f, 0f), 2); //Way 2 = 순찰 지정 지점 살짝 앞까지 이동
            WayPoints.SetValue(new Vector3(0f, 0f, 0f), 3); //Way 3 = 순찰 지정 지점까지 이동
        }
        if (Stage_count == 2) //스테이지2 순찰구역(학생회실 앞)
        {
            WayPoints.SetValue(new Vector3(4.8f, 0f, -5f), 0);
            WayPoints.SetValue(new Vector3(5f, 0f, -5f), 1);
            WayPoints.SetValue(new Vector3(4.8f, 0f, 5f), 2);
            WayPoints.SetValue(new Vector3(5f, 0f, 5f), 3);
        }
        if (Stage_count == 1) //a동 실습실 순찰구역
        {
            WayPoints.SetValue(new Vector3(-5f, 0f, 4.8f), 0);
            WayPoints.SetValue(new Vector3(-5f, 0f, 5f), 1);
            WayPoints.SetValue(new Vector3(5f, 0f, 4.8f), 2);
            WayPoints.SetValue(new Vector3(5f, 0, 5f), 3);
        }
    }


    private void Update()
    {
        if (isReset == true)
        {
            Enemy_Reset();
        }
        else
        {
            Patrol_check();

            isReset = State.GetComponent<Player_state>().Reset_ON;
        }
    }

    // Player 가 Enemy 에 닿았을 때(Player_state) Enemy 위치 리셋
    private void Enemy_Reset()
    {
        Run_sfx.SetActive(false);
        Walk_sfx.SetActive(false);

        isChasing = false;
        isdone = false;
        isPatrol = true;

        way_check = 0;
        WayPoint_Index = 0;

        this.transform.position = Starting_Point;

        isReset = false;
    }


    // 추적 상태가 아닐때, 순찰 경로 확인
    private void Patrol_check()
    {

        if (isChasing == false)
        {
            if (isdone == false)
            {
                Patrol();
            }
            if (isdone == true)
            {
                Reverse_patrol();
            }

            if (way_check == 4)
            {
                isdone = true;
                WayPoint_Index = 2;
                way_check = 4;
            }
            // way_check 가 3일때, 정방향 순찰중이면 5초동안 Patrol 함수 일시정지
            if (way_check == 3)
            {
                if (isdone == false)
                {
                    isPatrol = false;
                    Invoke("Wait_5Sec", 3f);
                }
            }
            // Way_check 가 2일때, 역방향 순찰중이면 5초동안 Patrol 함수 일시정지
            if (way_check == 2)
            {
                if (isdone == true)
                {
                    isPatrol = false;
                    Invoke("Wait_5Sec", 3f);
                    WayPoint_Index = 1;
                    way_check = 1;
                }
            }
            if (way_check == 1)
            {
                isdone = false;
            }
        }
    }

    private void Wait_5Sec()
    {
        isPatrol = true;
    }

    private void Check_ready()
    {
        way_check_ready = true;
    }

    // Enemy가 지정된 경로를 따라 이동함
    private void Patrol()
    {
        POS_Now = transform.position;

        if (isPatrol == true)
        {
            Walk_sfx.SetActive(true);
            Enemy_Anime.SetBool("isWalking", true);

            if (WayPoint_Index < WayPoints.Length)
            {
                float Walk_Speed = Enemy_Walk * Time.deltaTime;
                transform.position = Vector3.MoveTowards(POS_Now, WayPoints[WayPoint_Index], Walk_Speed);
                transform.LookAt(WayPoints[WayPoint_Index]);

                // 현재 위치 = 이동 지점 위치면, 인덱스에 +1 하여 다음 포인트로 이동
                if (Vector3.Distance(WayPoints[WayPoint_Index], POS_Now) == 0f)
                {
                    WayPoint_Index++;
                    way_check++;
                }
            }
        }
        else
        {
            Walk_sfx.SetActive(false);
            Enemy_Anime.SetBool("isWalking", false);
        }
    }
    // 지정된 경로 순찰 완료 후, 다시 경로를 따라 되돌아감
    private void Reverse_patrol()
    {
        POS_Now = transform.position;

        Walk_sfx.SetActive(true);
        Enemy_Anime.SetBool("isWalking", true);

        if (isPatrol == true)
        {
            float Walk_Speed = Enemy_Walk * Time.deltaTime;
            transform.position = Vector3.MoveTowards(POS_Now, WayPoints[WayPoint_Index], Walk_Speed);
            transform.LookAt(WayPoints[WayPoint_Index]);


            // 현재 위치 = 이동 지점 위치면, 인덱스에 +1 하여 다음 포인트로 이동
            if (Vector3.Distance(WayPoints[WayPoint_Index], POS_Now) == 0f)
            {
                WayPoint_Index--;
                way_check--;
            }
        }
        else
        {
            Walk_sfx.SetActive(false);
            Enemy_Anime.SetBool("isWalking", false);
        }
    }



    // 플레이어 추적
    private void OnTriggerStay(Collider other)
    {
        //Player가 탐사범위 Coliider(Trigger)에 들어왔을 때, Enemy와 탐사범위가 Player의 방향으로 회전 및 이동
        if (other.tag == "Player")
        {
            Enemy_Anime.SetBool("isTracking", true);

            isChasing = true;
            Target_Pos = new Vector3(other.transform.position.x, transform.position.y, other.transform.position.z);
            transform.LookAt(Target_Pos);
            this.transform.position = Vector3.MoveTowards(this.transform.position, Target_Pos, Enemy_Run * Time.deltaTime);
            Walk_sfx.SetActive(false);
            Run_sfx.SetActive(true);
            Music1.SetActive(false);
            Music2.SetActive(false);
            Music3.SetActive(true);
        }
        // Player가 탐사범위 안에서 Hide 상태가 되었을 때, 추격을 멈춤
        if (other.tag == "Hided")
        {
            Enemy_Anime.SetBool("isTracking", false);
            isChasing = false;
            Walk_sfx.SetActive(true);
            Run_sfx.SetActive(false);
            Music1.SetActive(true);
            Music2.SetActive(true);
            Music3.SetActive(false);
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.tag == "Player")
        {
            Enemy_Anime.SetBool("isTracking", false);
            isChasing = false;
            Walk_sfx.SetActive(true);
            Run_sfx.SetActive(false);
            Music1.SetActive(true);
            Music2.SetActive(true);
            Music3.SetActive(false);
        }
    }
}
